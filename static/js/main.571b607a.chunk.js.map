{"version":3,"sources":["Components/ConnectedComponent/Modal/index.tsx","Components/ConnectedComponent/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Modal","user","handleState","onChange","handleSubmit","type","handleClickEvent","event","a","console","log","Box","width","maxWidth","display","border","padding","fontWeight","position","top","left","borderRadius","bgcolor","textAlign","mt","TextField","label","size","e","balance","marginTop","Button","variant","onClick","ConnectedComponent","allContract","approve","deposit","withdraw","harvest","useState","approveInput","setApproveInput","depositInput","setDepositInput","withdrawInput","setWithdrawInput","approveState","setApproveState","depositState","setDepositState","withdrawState","setWithdrawState","hasApproved","setHasApproved","prevState","wethContract","contract","Error","target","value","ApproveProps","DepositProps","WithdrawProps","marginLeft","justifyContent","textOverflow","overflow","whiteSpace","address","className","earned","marginRight","margin","style","stake","marginBottom","allStake","INFURA_KEY","NETWORk_URLS","injected","InjectedConnector","supportedChainIds","walletConnectConnector","WalletConnectConnector","rpc","bridge","qrcode","initUser","App","useWeb3React","account","activate","chainId","connector","library","setUser","provider","setProvider","setAllContract","getBalance","balanceOf","hexBalance","ethers","utils","formatEther","formatBalance","Math","round","Number","String","getInfo","userInfo","stakeInfo","formatStake","formatEarned","getAllStake","hexAllStake","formatAllStake","amount","check","parseEther","catch","err","getUserInfo","then","Promise","all","result","useEffect","providers","JsonRpcProvider","signer","getSigner","Contract","ERC20","ERC20_WETH","dd2Contract","ConnectedProps","flexDirection","undefined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","getLibrary","Web3Provider","Web3ReactProviderNetwork","createWeb3ReactRoot","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.571b607a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Box, Button, TextField } from '@mui/material';\r\nimport { IUser } from '../../../Interfaces'\r\n\r\ninterface Props {\r\n    user: IUser | undefined,\r\n    handleState: (event: any, type: string) => void,\r\n    onChange: (event: any, type: string) => void,\r\n    handleSubmit: (event: any, type: string) => void,\r\n    type: string\r\n}\r\n\r\nconst Modal: React.FC<Props> = ({user, handleState, onChange, handleSubmit, type}: Props) => {\r\n\r\n    const handleClickEvent = async (event: any) => {\r\n        handleSubmit(event, type)\r\n        handleState(event, type)\r\n    }\r\n    console.log(type)\r\n    return (\r\n        <Box\r\n            width={\"30%\"}\r\n            maxWidth={400}\r\n            display=\"inline-block\"\r\n            border=\"1px solid #333\"\r\n            padding=\"16px 32px\"\r\n            fontWeight=\"bold\"\r\n            position=\"absolute\"\r\n            top={\"10%\"}\r\n            left={\"30%\"}\r\n            borderRadius={'24px'}\r\n            bgcolor=\"#fefbd8\"\r\n        >\r\n            <Box textAlign=\"left\">{type}</Box>\r\n            <Box mt=\"50px\">\r\n                <TextField label=\"Approve\" size=\"small\" onChange={(e) => onChange(e, type)}></TextField>\r\n            </Box>\r\n            <Box mt=\"20px\">Your WETH balance: {user && user.balance} WETH</Box>\r\n            <Box\r\n                marginTop={'20px'}\r\n            >\r\n                <Button variant=\"contained\" size=\"small\" onClick={handleClickEvent}>{type}</Button>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Modal","import { FC, useState } from 'react'\r\nimport { IUser, IContract } from '../../Interfaces'\r\nimport { Box, Button, TextField } from '@mui/material';\r\n\r\nimport Modal from './Modal'\r\nimport './ConnectedComponent.scss'\r\ninterface Props {\r\n    user: IUser | undefined,\r\n    allContract: IContract | undefined\r\n    approve: (wethContract: any, contract: any, input: string) => void,\r\n    deposit: (contract: any, input: string) => void,\r\n    withdraw: (contract: any, input: string) => void\r\n    harvest: (contract: any) => void\r\n}\r\n\r\nconst ConnectedComponent: FC<Props> = ({ user, allContract, approve, deposit, withdraw, harvest }: Props) => {\r\n    const [approveInput, setApproveInput] = useState('')\r\n    const [depositInput, setDepositInput] = useState('')\r\n    const [withdrawInput, setWithdrawInput] = useState('')\r\n    const [approveState, setApproveState] = useState(false)\r\n    const [depositState, setDepositState] = useState(false)\r\n    const [withdrawState, setWithdrawState] = useState(false)\r\n    const [hasApproved, setHasApproved] = useState(false)\r\n    // console.log(user)\r\n\r\n    const handleState = (event: any, type: string): void => {\r\n        switch (type) {\r\n            case 'approve': {\r\n                setApproveState(prevState => !prevState)\r\n                break;\r\n            }\r\n            case 'deposit': {\r\n                setDepositState(prevState => !prevState)\r\n                break;\r\n            }\r\n            case 'withdraw': {\r\n                setWithdrawState(prevState => !prevState)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event: any, type: string) => {\r\n        try {\r\n            switch (type) {\r\n                case 'approve': {\r\n                    const result = typeof await approve(allContract?.wethContract, allContract?.contract, approveInput)\r\n                    if (result === 'boolean') {\r\n                        setHasApproved(true)\r\n                    }\r\n                    break;\r\n                }\r\n                case 'deposit': {\r\n                    deposit(allContract?.contract, depositInput)\r\n                    break;\r\n                }\r\n                case 'withdraw': {\r\n                    withdraw(allContract?.contract, withdrawInput)\r\n                    break;\r\n                }\r\n                case 'harvest': {\r\n                    harvest(allContract?.contract)\r\n                    break;\r\n                }\r\n                default: throw new Error('Unknown type')\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const onChange = (event: any, type: string) => {\r\n        switch (type) {\r\n            case 'approve': {\r\n                setApproveInput(event.target.value)\r\n                break;\r\n            }\r\n            case 'deposit': {\r\n                setDepositInput(event.target.value)\r\n                break;\r\n            }\r\n            case 'withdraw': {\r\n                setWithdrawInput(event.target.value)\r\n                break;\r\n            }\r\n            default: throw new Error('Unknown type')\r\n        }\r\n    }\r\n\r\n    const ApproveProps = {\r\n        user,\r\n        handleState,\r\n        handleSubmit,\r\n        onChange,\r\n        type: 'approve'\r\n    }\r\n\r\n    const DepositProps = {\r\n        user,\r\n        handleState,\r\n        handleSubmit,\r\n        onChange,\r\n        type: 'deposit'\r\n    }\r\n\r\n    const WithdrawProps = {\r\n        user,\r\n        handleState,\r\n        handleSubmit,\r\n        onChange,\r\n        type: 'withdraw'\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            width={\"70%\"}\r\n            maxWidth={600}\r\n            display=\"inline-block\"\r\n            marginLeft=\"auto\"\r\n            border=\"1px solid #333\"\r\n            padding=\"16px 32px\"\r\n            fontWeight=\"bold\"\r\n        >\r\n            <Box\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n            >\r\n                <Box\r\n                    textOverflow=\"ellipsis\"\r\n                    overflow=\"hidden\"\r\n                    width=\"150px\"\r\n                    whiteSpace=\"nowrap\"\r\n                >\r\n                    Wallet adress: {user && user.address}\r\n                </Box>\r\n                <div className=\"user-balance\">Balance: {user && user.balance} WETH</div>\r\n            </Box>\r\n            <Box\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                marginTop={4}\r\n            >\r\n                <Box>\r\n                    Token earned: {user && user.earned} DD2\r\n                </Box>\r\n                <Box\r\n                    marginRight={3}\r\n                >\r\n                    <Button variant=\"contained\" size=\"small\" onClick={(e) => handleSubmit(e, 'harvest')}>Harvest</Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            {/* <label htmlFor=\"checkbox-test\">check 1</label> */}\r\n            {\r\n                hasApproved ?\r\n                    <Box\r\n                        margin='30px auto'\r\n                        display=\"flex\"\r\n                        justifyContent='center'\r\n                    >\r\n                        <Box margin=\"0 10px\" width={'40%'}>\r\n                            <Button variant=\"contained\" style={{ width: \"100%\" }} onClick={(e) => handleState(e, 'deposit')}>\r\n                                deposit\r\n                            </Button>\r\n                        </Box>\r\n                        <Box width={'40%'}>\r\n                            <Button variant=\"contained\" style={{ width: \"100%\" }} onClick={(e) => handleState(e, 'withdraw')}>\r\n                                withdraw\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                    :\r\n                    <Box width='50%'\r\n                        margin='30px auto'\r\n                    >\r\n                        <Button variant=\"contained\" style={{ width: \"100%\" }} onClick={(e) => handleState(e, 'approve')}>\r\n                            Approve\r\n                        </Button>\r\n                    </Box>\r\n            }\r\n            <Box\r\n                textAlign=\"left\"\r\n            >\r\n                Your stake: {user && user.stake} WETH\r\n            </Box>\r\n            <Box\r\n                textAlign=\"left\"\r\n                marginTop={5}\r\n                marginBottom={3}\r\n            >\r\n                All stake: {user && user.allStake} WETH\r\n            </Box>\r\n            {approveState && <Modal {...ApproveProps} />}\r\n            {depositState && <Modal {...DepositProps} />}\r\n            {withdrawState && <Modal {...WithdrawProps} />}\r\n        </Box>\r\n        // <div className=\"user\">\r\n        //     <div className=\"user-info\">\r\n        //         <div className=\"user-address\">wallet adress: {user && user.address}</div>\r\n        //         <div className=\"user-balance\">balance: {user && user.balance}</div>\r\n        //         <div className=\"user-stake\">your stake: {user && user.stake}</div>\r\n        //         <div className=\"user-earned\">Token earned: {user && user.earned}</div>\r\n        //         <div className=\"user-all-stake\">All stake: {user && user.allStake}</div>\r\n        //     </div>\r\n        //     <div className=\"user-action\">\r\n        //         <div className=\"user-approve\">\r\n        //             <input type=\"text\" className=\"approve-input\" name=\"approve\" onChange={(e) => onChange(e, 'approve')} value={approveInput} />\r\n        //             <button className=\"approve-button\" onClick={(e) => handleSubmit(e, 'approve')}>approve</button>\r\n        //         </div>\r\n        //         <div className=\"user-deposit\">\r\n        //             <input type=\"text\" className=\"deposit-input\" name=\"deposit\" onChange={(e) => onChange(e, 'deposit')} value={depositInput} />\r\n        //             <button className=\"deposit-button\" onClick={(e) => handleSubmit(e, 'deposit')}>deposit</button>\r\n        //         </div>\r\n        //         <div className=\"user-withdraw\">\r\n        //             <input type=\"text\" className=\"withdraw-input\" name=\"withdraw\" onChange={(e) => onChange(e, 'withdraw')} value={withdrawInput} />\r\n        //             <button className=\"withdraw-button\" onClick={(e) => handleSubmit(e, 'withdraw')}>withdraw</button>\r\n        //         </div>\r\n        //         <div className=\"user-harvest\">\r\n        //             <button className=\"harvest-button\" onClick={(e) => handleSubmit(e, 'harvest')}>harvest</button>\r\n        //         </div>\r\n        //     </div>\r\n        // </div >\r\n        // <button onClick={getUserInfo}>Get user info</button>\r\n    )\r\n}\r\n\r\nexport default ConnectedComponent","import React, { useState, useEffect, FC } from 'react'\nimport { Box, Button, styled } from '@mui/material';\nimport './App.scss';\nimport { ethers } from 'ethers'\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport ERC20 from './ERC20.json'\nimport ERC20_WETH from './ERC20_WETH.json'\nimport ERC20_DD2 from './ERC20_DD2.json'\n\nimport ConnectedComponent from './Components/ConnectedComponent';\nimport { IUser, IContract } from './Interfaces'\nconst INFURA_KEY = 'bb6b6f6f39434b1da5b19f5853dfd502';\nconst WALLETCONNECT_BRIDGE_URL = \"https://bridge.walletconnect.org\";\n\nconst NETWORk_URLS = {\n  1: `https://mainnet.infura.io/v3/${INFURA_KEY}`,\n  4: `https://rinkeby.infura.io/v3/${INFURA_KEY}`,\n  5: `https://goerli.infura.io/v3/${INFURA_KEY}`,\n  42: `https://kovan.infura.io/v3/${INFURA_KEY}`\n}\n\nconst injected = new InjectedConnector({\n  supportedChainIds: [1, 4, 5, 42]\n})\n\nconst walletConnectConnector = new WalletConnectConnector({\n  supportedChainIds: [1, 4, 5, 42],\n  rpc: NETWORk_URLS,\n  bridge: WALLETCONNECT_BRIDGE_URL,\n  qrcode: true\n})\n\nconst PROVIDER_URL = 'https://rinkeby.infura.io/v3/bb6b6f6f39434b1da5b19f5853dfd502';\nconst MY_ADDRESS = '0x3BF27CAf1ef5A5Bcfd6C6909bd4F2a85AB8491Ae';\nconst CONTRACT_ADDRESS = '0x9da687e88b0A807e57f1913bCD31D56c49C872c2';\nconst WETH_CONTRACT_ADDRESS = '0xc778417e063141139fce010982780140aa0cd5ab';\nconst DD2_CONTRACT_ADDRESS = '0xb1745657CB84c370DD0Db200a626d06b28cc5872';\n\n// const DarkButton = styled(Button) ({\n//   backgroundColor: \n// })\nconst initUser: IUser = {\n  address: '',\n  balance: '',\n  stake: '',\n  earned: '',\n  allStake: ''\n}\n\nconst App: FC = () => {\n  const { account, chainId, connector, activate, library } = useWeb3React();\n\n  const [user, setUser] = useState<IUser>(initUser)\n  const [provider, setProvider] = useState<any>()\n  const [allContract, setAllContract] = useState<IContract>()\n  console.log(allContract)\n  const connectInjectedConnector = (): void => {\n    activate(injected);\n  }\n\n  const connectWalletConnectConnector = (): void => {\n    activate(walletConnectConnector, undefined, true).catch((e) => console.log(e))\n  }\n\n  const getBalance = async (wethContract: any, account: string | null | undefined) => {\n    // console.log(wethContract)\n    const hexBalance = await wethContract.balanceOf(account)\n    const balance = ethers.utils.formatEther(hexBalance)\n\n    const formatBalance = Math.round(Number(balance) * 100) / 100\n    return String(formatBalance)\n  }\n\n  const getInfo = async (contract: any, account: string | null | undefined) => {\n    const stakeInfo = await contract.userInfo(account)\n\n    const stake = ethers.utils.formatEther(stakeInfo[0])\n    const earned = ethers.utils.formatEther(stakeInfo[1])\n\n    const formatStake = String(Math.round(Number(stake) * 100) / 100)\n    const formatEarned = String(Math.round(Number(earned) * 100) / 100)\n\n    return {formatStake, formatEarned}\n  }\n\n  const getAllStake = async (wethContract: any, contract: any) => {\n    const hexAllStake = await wethContract.balanceOf(contract.address)\n    const allStake = ethers.utils.formatEther(hexAllStake)\n\n    const formatAllStake = Math.round(Number(allStake) * 100) / 100\n    return String(formatAllStake)\n  }\n\n  const approve = async (wethContract: any, contract: any, amount: string) => {\n    let check: boolean = true;\n    \n    const approve = await wethContract.approve(contract.address, ethers.utils.parseEther(amount))\n      .catch((err: string) => {console.log(err); check = false;})\n    // approve.wait()\n    await getUserInfo(account, provider, allContract)\n    console.log('APPROVE SUCCESS')\n    return check;\n  }\n\n  const deposit = async (contract: any, amount: string) => {\n    const deposit = await contract.deposit(amount)\n      .catch((err: string) => {console.log(err)})\n    // deposit.wait()\n\n    getUserInfo(account, provider, allContract)\n    console.log('DEPOSIT SUCCESS')\n  }\n\n  const withdraw = async (contract: any, amount: string) => {\n    await contract.withdraw(amount)\n      .then(() => {\n        if (account && allContract) {\n          getUserInfo(account, provider, allContract)\n          console.log('WITHDRAW SUCCESS')\n        }\n      })\n      .catch((err: string) => console.log(err))\n  }\n\n  const harvest = async (contract: any) => {\n    await contract.withdraw('0')\n      .catch((err: string) => console.log(err))\n      .then(async () => {\n        if (account && allContract) {\n          await getUserInfo(account, provider, allContract)\n          console.log('HARVEST SUCCESS')\n        }\n      })\n  }\n\n  const getUserInfo = async (account: string | null | undefined | null | undefined, provider: any, allContract: IContract | undefined) => {\n    console.log(allContract)\n    const result = await Promise.all([\n      await getBalance(allContract?.wethContract, account),\n      await getInfo(allContract?.contract, account),\n      await getAllStake(allContract?.wethContract, allContract?.contract)\n    ])\n    const balance = result[0]\n    \n    const {formatStake, formatEarned} = result[1]\n\n    const allStake = result[2]\n\n    setUser({\n      address: account,\n      balance, \n      stake: formatStake,\n      earned: formatEarned,\n      allStake\n    })\n    \n  }\n\n\n  useEffect(() => {\n    if (account) {\n      const provider = new ethers.providers.JsonRpcProvider('https://rinkeby.infura.io/v3/bb6b6f6f39434b1da5b19f5853dfd502');\n\n      const signer = library.getSigner();\n\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, ERC20, signer)\n\n      const wethContract = new ethers.Contract(WETH_CONTRACT_ADDRESS, ERC20_WETH, signer)\n\n      const dd2Contract = new ethers.Contract(DD2_CONTRACT_ADDRESS, ERC20_WETH, signer)\n\n      const allContract: IContract = {\n        contract: contract,\n        wethContract: wethContract,\n        dd2Contract: dd2Contract\n      }\n\n      getUserInfo(account, provider, allContract)\n      setProvider(provider)\n      setAllContract(allContract)\n    }\n  }, [account])\n\n  const ConnectedProps = {\n    user: user,\n    allContract: allContract,\n    approve: approve,\n    deposit: deposit,\n    withdraw: withdraw,\n    harvest: harvest\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        account ?\n          <>\n            <ConnectedComponent\n              {...ConnectedProps}\n            />\n          </>\n          :\n          <Box className=\"app-connect\"\n            display=\"inline-flex\"\n            flexDirection=\"column\"\n          >\n            <Box mt={10}>\n              <Button variant=\"contained\" size=\"large\" onClick={connectInjectedConnector} className=\"btn btn-injected\">Connect Metamask</Button>\n            </Box>\n            <Box mt={10}>\n              <Button variant=\"contained\" size=\"large\" onClick={connectWalletConnectConnector} className=\"btn\">Connect walletconnect</Button>\n            </Box>\n          </Box>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App.tsx';\nimport reportWebVitals from './reportWebVitals';\nimport { Web3ReactProvider, createWeb3ReactRoot } from '@web3-react/core'\nimport { Web3Provider } from '@ethersproject/providers'\n\nfunction getLibrary(provider, connector) {\n  const library = new Web3Provider(provider)\n  return library\n}\n\nconst Web3ReactProviderNetwork = createWeb3ReactRoot('NETWORK')\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Web3ReactProviderNetwork getLibrary={getLibrary}>\n        <App />\n      </Web3ReactProviderNetwork>\n    </Web3ReactProvider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}