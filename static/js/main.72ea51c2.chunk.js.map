{"version":3,"sources":["Components/ConnectedComponent/Modal/index.tsx","Components/ConnectedComponent/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Modal","user","handleState","onChange","handleSubmit","type","handleClickEvent","event","a","console","log","Box","width","maxWidth","display","border","padding","fontWeight","position","top","left","borderRadius","bgcolor","textAlign","mt","TextField","label","size","e","balance","stake","marginTop","Button","variant","onClick","ConnectedComponent","allContract","approve","deposit","withdraw","harvest","useState","depositInput","setDepositInput","withdrawInput","setWithdrawInput","depositState","setDepositState","withdrawState","setWithdrawState","hasApproved","setHasApproved","useEffect","prevState","wethContract","mcContract","Error","target","value","DepositProps","WithdrawProps","marginLeft","justifyContent","textOverflow","overflow","whiteSpace","address","className","earned","marginRight","margin","style","marginBottom","totalStake","INFURA_KEY","NETWORk_URLS","injected","InjectedConnector","supportedChainIds","walletConnectConnector","WalletConnectConnector","rpc","bridge","qrcode","MC_CONTRACT_ADDRESS","WETH_CONTRACT_ADDRESS","initUser","App","require","useWeb3React","account","activate","chainId","connector","library","deactivate","setUser","setProvider","setSigner","setAllContract","connectInjectedConnector","localStorage","setItem","connectWalletConnectConnector","undefined","catch","disconnectConnector","clear","ethers","utils","parseEther","wait","getUserInfo","contract","amount","BigNumber","from","toBigInt","err","getProvider","provider","providers","JsonRpcProvider","getSigner","signer","getAllContract","Contract","ERC20_MC","ERC20_WETH","dd2Contract","ERC20_DD2","multicall","Multicall","ethersProvider","tryAggregate","contractCallContext","reference","contractAddress","abi","calls","methodName","methodParameters","call","multicallResults","results","Object","entries","result","callsReturnContext","returnValues","hex","push","formatEther","map","index","String","Math","floor","Number","allowance","newUser","connect","getItem","walletConnect","connectedProps","flexDirection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getLibrary","Web3Provider","Web3ReactProviderNetwork","createWeb3ReactRoot","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.72ea51c2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Box, Button, TextField } from '@mui/material';\r\nimport { IUser } from '../../../Interfaces'\r\n\r\ninterface Props {\r\n    user: IUser,\r\n    handleState: (event: any, type: string) => void,\r\n    onChange: (event: any, type: string) => void,\r\n    handleSubmit: (event: any, type: string) => void,\r\n    type: string\r\n}\r\n\r\nconst Modal: React.FC<Props> = ({user, handleState, onChange, handleSubmit, type}: Props) => {\r\n\r\n    const handleClickEvent = async (event: any) => {\r\n        handleSubmit(event, type)\r\n        handleState(event, type)\r\n    }\r\n    console.log(type)\r\n    return (\r\n        <Box\r\n            width={\"30%\"}\r\n            maxWidth={400}\r\n            display=\"inline-block\"\r\n            border=\"1px solid #333\"\r\n            padding=\"16px 32px\"\r\n            fontWeight=\"bold\"\r\n            position=\"absolute\"\r\n            top={\"10%\"}\r\n            left={\"30%\"}\r\n            borderRadius={'24px'}\r\n            bgcolor=\"#fefbd8\"\r\n        >\r\n            <Box textAlign=\"left\">{type}</Box>\r\n            <Box mt=\"50px\">\r\n                <TextField label=\"Approve\" size=\"small\" onChange={(e) => onChange(e, type)}></TextField>\r\n            </Box>\r\n            {type === 'deposit' && <Box mt=\"20px\">Your WETH balance: {user && user.balance} WETH</Box>}\r\n            {type === 'withdraw' && <Box mt=\"20px\">Your WETH balance: {user && user.stake} WETH</Box>}\r\n            <Box\r\n                marginTop={'20px'}\r\n            >\r\n                <Button variant=\"contained\" size=\"small\" onClick={handleClickEvent}>{type}</Button>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Modal","import { FC, useEffect, useState } from 'react'\r\nimport { IUser, IContract } from '../../Interfaces'\r\nimport { Box, Button, TextField } from '@mui/material';\r\nimport { ethers } from 'ethers'\r\nimport Modal from './Modal'\r\nimport './ConnectedComponent.scss'\r\ninterface Props {\r\n    user: IUser,\r\n    allContract: IContract | undefined\r\n    approve: (wethContract: any, mcContract: any, user: IUser) => void,\r\n    deposit: (mcContract: any, input: string) => void,\r\n    withdraw: (mcContract: any, input: string) => void\r\n    harvest: (mcContract: any) => void\r\n}\r\n\r\nconst ConnectedComponent: FC<Props> = ({ user, allContract, approve, deposit, withdraw, harvest}: Props) => {\r\n    // console.log(user)\r\n    const [depositInput, setDepositInput] = useState('')\r\n    const [withdrawInput, setWithdrawInput] = useState('')\r\n    const [depositState, setDepositState] = useState(false)\r\n    const [withdrawState, setWithdrawState] = useState(false)\r\n    const [hasApproved, setHasApproved] = useState(false)\r\n    // console.log(user)\r\n    // console.log(hasApproved)\r\n\r\n    useEffect(() => {\r\n        if (user.hasApproved) setHasApproved(true)\r\n    }, [user])\r\n    \r\n    const handleState = (event: any, type: string): void => {\r\n        switch (type) {\r\n            case 'deposit': {\r\n                setDepositState(prevState => !prevState)\r\n                break;\r\n            }\r\n            case 'withdraw': {\r\n                setWithdrawState(prevState => !prevState)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event: any, type: string) => {\r\n        try {\r\n            switch (type) {\r\n                case 'approve': {\r\n                    await approve(allContract?.wethContract, allContract?.mcContract, user)\r\n                    // console.log(await getAllowance(allContract?.wethContract, allContract?.mcContract, user))\r\n                    break;\r\n                }\r\n                case 'deposit': {\r\n                    deposit(allContract?.mcContract, depositInput)\r\n                    break;\r\n                }\r\n                case 'withdraw': {\r\n                    withdraw(allContract?.mcContract, withdrawInput)\r\n                    break;\r\n                }\r\n                case 'harvest': {\r\n                    harvest(allContract?.mcContract)\r\n                    break;\r\n                }\r\n                default: throw new Error('Unknown type')\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const onChange = (event: any, type: string) => {\r\n        switch (type) {\r\n            case 'deposit': {\r\n                setDepositInput(event.target.value)\r\n                break;\r\n            }\r\n            case 'withdraw': {\r\n                setWithdrawInput(event.target.value)\r\n                break;\r\n            }\r\n            default: throw new Error('Unknown type')\r\n        }\r\n    }\r\n\r\n    const DepositProps = {\r\n        user,\r\n        handleState,\r\n        handleSubmit,\r\n        onChange,\r\n        type: 'deposit'\r\n    }\r\n\r\n    const WithdrawProps = {\r\n        user,\r\n        handleState,\r\n        handleSubmit,\r\n        onChange,\r\n        type: 'withdraw'\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            width={\"70%\"}\r\n            maxWidth={600}\r\n            display=\"inline-block\"\r\n            marginLeft=\"auto\"\r\n            border=\"1px solid #333\"\r\n            padding=\"16px 32px\"\r\n            fontWeight=\"bold\"\r\n        >\r\n            <Box\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n            >\r\n                <Box\r\n                    textOverflow=\"ellipsis\"\r\n                    overflow=\"hidden\"\r\n                    width=\"150px\"\r\n                    whiteSpace=\"nowrap\"\r\n                >\r\n                    Wallet adress: {user && user.address}\r\n                </Box>\r\n                <div className=\"user-balance\">Balance: {user && user.balance} WETH</div>\r\n            </Box>\r\n            <Box\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                marginTop={4}\r\n            >\r\n                <Box>\r\n                    Token earned: {user && user.earned} DD2\r\n                </Box>\r\n                <Box\r\n                    marginRight={3}\r\n                >\r\n                    <Button variant=\"contained\" size=\"small\" onClick={(e) => handleSubmit(e, 'harvest')}>Harvest</Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            {/* <label htmlFor=\"checkbox-test\">check 1</label> */}\r\n            {\r\n                hasApproved ?\r\n                    <Box\r\n                        margin='30px auto'\r\n                        display=\"flex\"\r\n                        justifyContent='center'\r\n                    >\r\n                        <Box margin=\"0 10px\" width={'40%'}>\r\n                            <Button variant=\"contained\" style={{ width: \"100%\" }} onClick={(e) => handleState(e, 'deposit')}>\r\n                                deposit\r\n                            </Button>\r\n                        </Box>\r\n                        <Box width={'40%'}>\r\n                            <Button variant=\"contained\" style={{ width: \"100%\" }} onClick={(e) => handleState(e, 'withdraw')}>\r\n                                withdraw\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                    :\r\n                    <Box width='50%'\r\n                        margin='30px auto'\r\n                    >\r\n                        <Button variant=\"contained\" style={{ width: \"100%\" }} onClick={(e) => handleSubmit(e, 'approve')}>\r\n                            Approve\r\n                        </Button>\r\n                    </Box>\r\n            }\r\n            <Box\r\n                textAlign=\"left\"\r\n            >\r\n                Your stake: {user && user.stake} WETH\r\n            </Box>\r\n            <Box\r\n                textAlign=\"left\"\r\n                marginTop={5}\r\n                marginBottom={3}\r\n            >\r\n                All stake: {user && user.totalStake} WETH\r\n            </Box>\r\n            {/* {approveState && <Modal {...ApproveProps} />} */}\r\n            {depositState && <Modal {...DepositProps} />}\r\n            {withdrawState && <Modal {...WithdrawProps} />}\r\n        </Box>\r\n        // <div className=\"user\">\r\n        //     <div className=\"user-info\">\r\n        //         <div className=\"user-address\">wallet adress: {user && user.address}</div>\r\n        //         <div className=\"user-balance\">balance: {user && user.balance}</div>\r\n        //         <div className=\"user-stake\">your stake: {user && user.stake}</div>\r\n        //         <div className=\"user-earned\">Token earned: {user && user.earned}</div>\r\n        //         <div className=\"user-all-stake\">All stake: {user && user.allStake}</div>\r\n        //     </div>\r\n        //     <div className=\"user-action\">\r\n        //         <div className=\"user-approve\">\r\n        //             <input type=\"text\" className=\"approve-input\" name=\"approve\" onChange={(e) => onChange(e, 'approve')} value={approveInput} />\r\n        //             <button className=\"approve-button\" onClick={(e) => handleSubmit(e, 'approve')}>approve</button>\r\n        //         </div>\r\n        //         <div className=\"user-deposit\">\r\n        //             <input type=\"text\" className=\"deposit-input\" name=\"deposit\" onChange={(e) => onChange(e, 'deposit')} value={depositInput} />\r\n        //             <button className=\"deposit-button\" onClick={(e) => handleSubmit(e, 'deposit')}>deposit</button>\r\n        //         </div>\r\n        //         <div className=\"user-withdraw\">\r\n        //             <input type=\"text\" className=\"withdraw-input\" name=\"withdraw\" onChange={(e) => onChange(e, 'withdraw')} value={withdrawInput} />\r\n        //             <button className=\"withdraw-button\" onClick={(e) => handleSubmit(e, 'withdraw')}>withdraw</button>\r\n        //         </div>\r\n        //         <div className=\"user-harvest\">\r\n        //             <button className=\"harvest-button\" onClick={(e) => handleSubmit(e, 'harvest')}>harvest</button>\r\n        //         </div>\r\n        //     </div>\r\n        // </div >\r\n        // <button onClick={getUserInfo}>Get user info</button>\r\n    )\r\n}\r\n\r\nexport default ConnectedComponent","import React, { useState, useEffect, FC } from 'react'\r\nimport { Box, Button, styled } from '@mui/material';\r\nimport './App.scss';\r\nimport { ethers } from 'ethers'\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\r\nimport ERC20_MC from './ERC20_MC.json'\r\nimport ERC20_WETH from './ERC20_WETH.json'\r\nimport ERC20_DD2 from './ERC20_DD2.json'\r\nimport {\r\n  Multicall,\r\n  ContractCallResults,\r\n  ContractCallContext,\r\n} from 'ethereum-multicall';\r\n\r\nimport ConnectedComponent from './Components/ConnectedComponent';\r\nimport { IUser, IContract } from './Interfaces'\r\nconst INFURA_KEY = 'bb6b6f6f39434b1da5b19f5853dfd502';\r\nconst WALLETCONNECT_BRIDGE_URL = \"https://bridge.walletconnect.org\";\r\n\r\nconst NETWORk_URLS = {\r\n  1: `https://mainnet.infura.io/v3/${INFURA_KEY}`,\r\n  4: `https://rinkeby.infura.io/v3/${INFURA_KEY}`,\r\n  5: `https://goerli.infura.io/v3/${INFURA_KEY}`,\r\n  42: `https://kovan.infura.io/v3/${INFURA_KEY}`\r\n}\r\n\r\nconst injected = new InjectedConnector({\r\n  supportedChainIds: [1, 4, 5, 42]\r\n})\r\n\r\nconst walletConnectConnector = new WalletConnectConnector({\r\n  supportedChainIds: [1, 4, 5, 42],\r\n  rpc: NETWORk_URLS,\r\n  bridge: WALLETCONNECT_BRIDGE_URL,\r\n  qrcode: true\r\n})\r\n\r\nconst PROVIDER_URL = 'https://rinkeby.infura.io/v3/bb6b6f6f39434b1da5b19f5853dfd502';\r\nconst MY_ADDRESS = '0x3BF27CAf1ef5A5Bcfd6C6909bd4F2a85AB8491Ae';\r\nconst MC_CONTRACT_ADDRESS = '0x9da687e88b0A807e57f1913bCD31D56c49C872c2';\r\nconst WETH_CONTRACT_ADDRESS = '0xc778417e063141139fce010982780140aa0cd5ab';\r\nconst DD2_CONTRACT_ADDRESS = '0xb1745657CB84c370DD0Db200a626d06b28cc5872';\r\n\r\n// const DarkButton = styled(Button) ({\r\n//   backgroundColor: \r\n// })\r\nconst initUser: IUser = {\r\n  address: '',\r\n  balance: '',\r\n  stake: '',\r\n  earned: '',\r\n  totalStake: '',\r\n  hasApproved: false\r\n}\r\n\r\nconst App: FC = () => {\r\n  const ethereumMulticall = require('ethereum-multicall')\r\n\r\n  const { account, chainId, connector, activate, library, deactivate } = useWeb3React();\r\n  const [user, setUser] = useState<IUser>(initUser)\r\n  const [provider, setProvider] = useState<any>()\r\n  const [signer, setSigner] = useState<any>()\r\n  const [allContract, setAllContract] = useState<IContract>()\r\n  // console.log(allContract)\r\n  const connectInjectedConnector = (): void => {\r\n    activate(injected);\r\n    console.log(account)\r\n    localStorage.setItem('connect', 'injected')\r\n  }\r\n\r\n  const connectWalletConnectConnector = (): void => {\r\n    activate(walletConnectConnector, undefined, true).catch((e) => console.log(e))\r\n    localStorage.setItem('connect', 'walletConnect')\r\n  }\r\n\r\n  const disconnectConnector = async () => {\r\n    localStorage.clear()\r\n    deactivate()\r\n    setUser(initUser)\r\n  }\r\n\r\n  const approve = async (wethContract: any, mcContract: any, user: IUser) => {\r\n    console.log(mcContract.address)\r\n    const approve = await wethContract.approve(mcContract.address, ethers.utils.parseEther(user.balance))\r\n    await approve.wait(1);\r\n\r\n    if (account) {\r\n      getUserInfo(account)\r\n    }\r\n\r\n    console.log('APPROVE SUCCESS')\r\n  }\r\n\r\n  const deposit = async (contract: any, amount: string) => {\r\n    const deposit = await contract.deposit(ethers.BigNumber.from(amount).toBigInt())\r\n      .catch((err: string) => { console.log(err) })\r\n\r\n    if (deposit && account) {\r\n      await deposit.wait(1)\r\n      getUserInfo(account)\r\n      console.log('DEPOSIT SUCCESS')\r\n    }\r\n  }\r\n\r\n  const withdraw = async (contract: any, amount: string) => {\r\n    const withdraw = await contract.withdraw(ethers.BigNumber.from(amount).toBigInt())\r\n      .catch((err: string) => console.log(err))\r\n\r\n    if (withdraw && account) {\r\n      await withdraw.wait(1)\r\n      getUserInfo(account)\r\n      console.log('WITHDRAW SUCCESS')\r\n    }\r\n  }\r\n\r\n  const harvest = async (contract: any) => {\r\n    const harvest = await contract.withdraw('0')\r\n      .catch((err: string) => console.log(err))\r\n\r\n    if (harvest && account) {\r\n      await harvest.wait(1)\r\n      getUserInfo(account)\r\n      console.log('HARVEST SUCCESS')\r\n    }\r\n\r\n  }\r\n  \r\n  const getProvider = async () => {\r\n    const provider = new ethers.providers.JsonRpcProvider(PROVIDER_URL)\r\n    setProvider(provider)\r\n\r\n    return provider\r\n  }\r\n\r\n  const getSigner = () => {\r\n    const signer = library.getSigner()\r\n\r\n    setSigner(signer)\r\n    return signer\r\n  }\r\n\r\n  const getAllContract = (signer: any) => {\r\n    const mcContract = new ethers.Contract(MC_CONTRACT_ADDRESS, ERC20_MC, signer)\r\n    const wethContract = new ethers.Contract(WETH_CONTRACT_ADDRESS, ERC20_WETH, signer)\r\n    const dd2Contract = new ethers.Contract(DD2_CONTRACT_ADDRESS, ERC20_DD2, signer)\r\n\r\n    const allContract: IContract = {\r\n      mcContract,\r\n      wethContract,\r\n      dd2Contract\r\n    }\r\n\r\n    setAllContract(allContract)\r\n    return allContract\r\n  }\r\n\r\n  const getUserInfo = async (account: string) => {\r\n    const provider = await getProvider()\r\n    const signer = getSigner()\r\n    const allContract = getAllContract(signer)\r\n\r\n    const multicall = new Multicall({ ethersProvider: provider, tryAggregate: true })\r\n    const contractCallContext: ContractCallContext[] = [\r\n      {\r\n        reference: account + 'get balance',\r\n        contractAddress: WETH_CONTRACT_ADDRESS,\r\n        abi: ERC20_WETH,\r\n        calls: [{ reference: 'get balance', methodName: 'balanceOf', methodParameters: [account] }]\r\n      },\r\n      {\r\n        reference: account + 'get user info',\r\n        contractAddress: MC_CONTRACT_ADDRESS,\r\n        abi: ERC20_MC,\r\n        calls: [{ reference: 'get user info', methodName: 'userInfo', methodParameters: [account] }]\r\n      },\r\n      {\r\n        reference: account + 'get earned token',\r\n        contractAddress: MC_CONTRACT_ADDRESS,\r\n        abi: ERC20_MC,\r\n        calls: [{ reference: 'get earned token', methodName: 'pendingDD2', methodParameters: [account] }]\r\n      },\r\n      {\r\n        reference: account + 'get total stake',\r\n        contractAddress: WETH_CONTRACT_ADDRESS,\r\n        abi: ERC20_WETH,\r\n        calls: [{ reference: 'get total stake', methodName: 'balanceOf', methodParameters: [MC_CONTRACT_ADDRESS] }]\r\n      },\r\n      {\r\n        reference: account + 'get allowance',\r\n        contractAddress: WETH_CONTRACT_ADDRESS,\r\n        abi: ERC20_WETH,\r\n        calls: [{ reference: 'get allowance', methodName: 'allowance', methodParameters: [account, MC_CONTRACT_ADDRESS] }]\r\n      }\r\n    ]\r\n\r\n    const multicallResults: ContractCallResults = await multicall.call(contractCallContext)\r\n    // console.log(multicallResults.results)\r\n    const results = []\r\n\r\n    for (let [key, value] of Object.entries(multicallResults.results)) {\r\n      // console.log(key, value)\r\n      const result = value.callsReturnContext[0].returnValues[0].hex\r\n\r\n      // console.log(ethers.utils.formatEther(results[0].hex))\r\n      results.push(ethers.utils.formatEther(result))\r\n    }\r\n\r\n    const [balance, stake, earned, totalStake, allowance] = results.map((value, index) => {\r\n      console.log(value)\r\n      return String(Math.floor(Number(value) * 1000) / 1000)\r\n    })\r\n\r\n    // console.log(balance, stake, earned, totalStake)\r\n\r\n    const newUser: IUser = {\r\n      address: account,\r\n      balance,\r\n      stake,\r\n      earned,\r\n      totalStake,\r\n      hasApproved: Number(allowance) > 0\r\n    }\r\n\r\n    setUser(newUser)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      // do st\r\n      console.log(account)\r\n      getUserInfo(account)\r\n    }\r\n    else {\r\n\r\n    }\r\n  }, [account])\r\n\r\n  useEffect(() => {\r\n    const connect = localStorage.getItem(\"connect\");\r\n    const walletConnect = localStorage.getItem(\"walletconnect\");\r\n    console.log(connect);\r\n\r\n    if (connect === 'injected') {\r\n      connectInjectedConnector();\r\n    }\r\n    else if (connect === 'walletConnect' && walletConnect) {\r\n      connectWalletConnectConnector();\r\n    }\r\n  }, [])\r\n\r\n  const connectedProps = {\r\n    user,\r\n    allContract,\r\n    approve,\r\n    deposit,\r\n    withdraw,\r\n    harvest\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        account ?\r\n          <>\r\n            {/* {account} */}\r\n            <ConnectedComponent\r\n              {...connectedProps}\r\n            />\r\n            <Box mt={10}>\r\n              <Button variant=\"contained\" size=\"large\" onClick={disconnectConnector} className=\"btn\">disconnect</Button>\r\n            </Box>\r\n          </>\r\n          :\r\n          <Box className=\"app-connect\"\r\n            display=\"inline-flex\"\r\n            flexDirection=\"column\"\r\n          >\r\n            <Box mt={10}>\r\n              <Button variant=\"contained\" size=\"large\" onClick={connectInjectedConnector} className=\"btn btn-injected\">Connect Metamask</Button>\r\n            </Box>\r\n            <Box mt={10}>\r\n              <Button variant=\"contained\" size=\"large\" onClick={connectWalletConnectConnector} className=\"btn\">Connect walletconnect</Button>\r\n            </Box>\r\n          </Box>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App.tsx';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Web3ReactProvider, createWeb3ReactRoot } from '@web3-react/core'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\n\r\nfunction getLibrary(provider, connector) {\r\n  const library = new Web3Provider(provider)\r\n  return library\r\n}\r\n\r\nconst Web3ReactProviderNetwork = createWeb3ReactRoot('NETWORK')\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  // <React.StrictMode>\r\n  // </React.StrictMode>\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <Web3ReactProviderNetwork getLibrary={getLibrary}>\r\n        <App />\r\n      </Web3ReactProviderNetwork>\r\n    </Web3ReactProvider>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}